" Intro -------------------------------------------------------------------- {{{
"
" This is the vimrc of Uwe Kleinmann.
" I recently switched from using separate files to one big vimrc with markers.
" This was heavily inspired by @sjl from whose vimrc I borrowed some parts as
" well.
"
" Author: Uwe Kleinmann <uwe@kleinmann.org>
" Source: https://github.com/kleinmann/dotfiles/vim/vimrc.symlink
"
" }}}
" Preamble ----------------------------------------------------------------- {{{

set nocompatible

set shell=/bin/bash

let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" }}}
" Plugins ------------------------------------------------------------------ {{{

filetype off
call plug#begin('~/.vim/bundle')

" Github Repositories
Plug 'bling/vim-airline'
Plug 'KurtPreston/vim-autoformat-rails', { 'for': 'ruby' }
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-commentary'
Plug 'rhysd/committia.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'JazzCore/ctrlp-cmatcher', { 'do': './install.sh' }
Plug 'tacahiroy/ctrlp-funky'
Plug 'Raimondi/delimitMate'
Plug 'junegunn/vim-easy-align'
Plug 'editorconfig/editorconfig-vim'
Plug 'terryma/vim-expand-region'
Plug 'Konfekt/FastFold'
Plug 'kopischke/vim-fetch'
Plug 'tpope/vim-fugitive'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-scripts/LargeFile'
Plug 'cohama/lexima.vim'
Plug 'vim-scripts/listmaps.vim'
Plug 'matchit.zip'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'neomake/neomake'
Plug 'junegunn/vim-peekaboo'
Plug 'spf13/PIV', { 'for': 'php' }
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'rainbow_parentheses.vim'
Plug 'tpope/vim-rbenv',
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-rooter'
Plug 'vim-scripts/scratch.vim'
Plug 'ciaranm/securemodelines'
Plug 'tpope/vim-sleuth'
Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
Plug 'kana/vim-textobj-user'
Plug 'beyondwords/vim-twig', { 'for': 'twig' }
Plug 'mbbill/undotree'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'xmledit', { 'for': ['html', 'xml'] }

" Snippets
Plug 'jordwalke/AutoComplPop'
Plug 'honza/vim-snippets'
Plug 'sirver/ultisnips'
Plug 'jordwalke/VimCompleteLikeAModernEditor'

" Themes
Plug 'chriskempson/base16-vim'
Plug 'Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'CSApprox'
Plug 'nanotech/jellybeans.vim'
Plug 'goirijo/vim-jgg-colorscheme'
Plug 'morhetz/gruvbox'
Plug 'nice/sweater'
Plug 'romainl/Apprentice'
Plug 'jordwalke/flatlandia'
Plug 'dracula/dracula-theme', { 'rtp': 'vim' }
Plug 'ajh17/Spacegray.vim'

call plug#end()

filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" }}}
" Basics ------------------------------------------------------------------- {{{

set encoding=utf-8
scriptencoding utf-8
set modelines=0
set autoindent
set smartindent
set clipboard+=unnamed
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set numberwidth=5
set norelativenumber
set laststatus=2
set history=1000
set undofile
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set switchbuf=useopen
set autowrite
set autoread
set shiftround
set title
set linebreak

set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,tabpages,winsize,winpos " activate session saving

" iTerm2 is currently slow as balls at rendering the nice unicode lines, so for
" now I'll just use ASCII pipes.  They're ugly but at least I won't want to kill
" myself when trying to move around a file.
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Better Completion
set complete=.,b,u,t,i
set completeopt=longest,menu,preview

" Resize splits when the window is resized
au VimResized * :wincmd =

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Disable ex-mode
nnoremap Q <nop>

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=1200

" The "Press ENTER or type command to continue" prompt is jarring and usually unnecessary.
set shortmess=atI

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces, wrapping {{{

set tabstop=8
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set wrap
set whichwrap+=<,>,h,l,[,] " Backspace and cursors wrap lines
set textwidth=120
set formatoptions=qrn1j
set colorcolumn=+1

" }}}

" Backups {{{

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vimundo//     " undo files
set backupdir=~/.vimbackup// " backups
set directory=~/.vimswap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}

" Color scheme {{{

syntax on
set bg=dark
let base16colorspace=256
colorscheme gruvbox

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}

" }}}
" File shortcuts ----------------------------------------------------------- {{{

nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" }}}
" Searching and moving ----------------------------------------------------- {{{

" Use sane regexes.
cnoremap s/ s/\v
cnoremap s? s?\v

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

set nostartofline
set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

" Made D behave
nnoremap D d$

" Don't move on *
" I'd use a function for this but Vim clobbers the last search when you're in
" a function so fuck it, practicality beats purity.
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>

" Tags in all the places
set tags=./tags,~/tags,tags;,./TAGS,TAGS;

" Jumping to tags. {{{
"
" Basically, t jumps to tags (like normal) and <c-t> opens the tag in a new
" split instead.
"
" Both of them will align the destination line to the upper middle part of the
" screen.  Both will pulse the cursor line so you can see where the hell you
" are.  <C-t> will also fold everything in the buffer and then unfold just
" enough for you to see the destination line.
function! JumpToTag()
    execute "normal! \<c-]>mzzvzz15\<c-e>"
    execute "keepjumps normal! `z"
    Pulse
endfunction
function! JumpToTagInSplit()
    execute "normal! \<c-w>v\<c-]>mzzMzvzz15\<c-e>"
    execute "keepjumps normal! `z"
    Pulse
endfunction
" }}}

nnoremap t :silent! call JumpToTag()<cr>
nnoremap <c-t> :silent! call JumpToTagInSplit()<cr>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Fix linewise visual selection of various text objects
nnoremap VV V

" Directional Keys {{{

" Scroll screen lines, not file lines {{{
" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> <Down> ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> <Up> ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> <Down> ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> <Up> ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")
vnoremap <silent> <expr> <Down> ScreenMovement("j")
vnoremap <silent> <expr> k ScreenMovement("k")
vnoremap <silent> <expr> <Up> ScreenMovement("k")
vnoremap <silent> <expr> 0 ScreenMovement("0")
vnoremap <silent> <expr> ^ ScreenMovement("^")
vnoremap <silent> <expr> $ ScreenMovement("$")
" }}}

" Easy buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" }}}

" }}}
" Folding ------------------------------------------------------------------ {{{

set foldenable
set foldcolumn=1
set foldmethod=marker
set foldnestmax=10
set foldlevelstart=99

" Toggle folds with space
nnoremap <space> za
vnoremap <space> za

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}
" Filetype-specific -------------------------------------------------------- {{{

" All ---------------------------------------------------------------------- {{{

" Remove trailing whitespaces and \^M chars
autocmd BufWritePre * :%s/\s\+$//e

" }}}
" CSS ---------------------------------------------------------------------- {{{

augroup ft_css
    au!
    au FileType css,less,sass setlocal ai sw=2 sts=2 et
    au FileType css,less,sass setlocal omnifunc=csscomplete#CompleteCSS

    au Filetype css,less,sass setlocal foldmethod=marker
    au Filetype css,less,sass setlocal foldmarker={,}
    au Filetype css,less,sass setlocal iskeyword+=-

    " Sort CSS properties alphabetically
    au FileType css nnoremap <leader>css :g#\({\n\)\@<=#.,/}/sort<cr>)"

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au BufNewFile,BufRead *.less,*.css inoremap <buffer> {<cr> {}<left><cr><space><space><space><space>.<cr><esc>kA<bs>
augroup END

" }}}
" Docker ------------------------------------------------------------------- {{{

augroup ft_docker
    au!
    au BufNewFile,BufReadPost Dockerfile setlocal filetype=dockerfile
augroup END

" }}}
" HTML --------------------------------------------------------------------- {{{

augroup ft_html
    au!
    au FileType html setlocal ai sw=4 sts=4 et
    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

    au FileType html setlocal foldmethod=manual

    " Use <localleader>f to fold the current tag.
    au FileType html, nnoremap <buffer> <localleader>f Vatzf

    " Use <localleader>t to fold the current templatetag.
    au FileType html, nmap <buffer> <localleader>t viikojozf

    " Indent tag
    au FileType html, nnoremap <buffer> <localleader>= Vat=
augroup END

" }}}
" Javascript --------------------------------------------------------------- {{{

augroup ft_javascript
    au!
    au FileType javascript setlocal ai sw=2 sts=2 et
    au BufNewFile,BufReadPost *.json setlocal filetype=json
    au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

    au FileType javascript setlocal foldmethod=marker
    au FileType javascript setlocal foldmarker={,}

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au Filetype javascript inoremap <buffer> {<cr> {}<left><cr><space><space><space><space>.<cr><esc>kA<bs>

    " Prettify a hunk of JSON
    au FileType javascript nnoremap <buffer> <leader>js ^vg_:!python -m json.tool<cr>:%s/ \{4\}/  /<cr>
    au FileType javascript vnoremap <buffer> <leader>js :!python -m json.tool<cr>:%s/ \{4\}/  /<cr>
augroup END

" }}}
" Objective C -------------------------------------------------------------- {{{

augroup ft_objectivec
    au!
    " Build objective-c code by using rake
    au FileType objc setlocal makeprg=rake
augroup END

" }}}
" PHP ---------------------------------------------------------------------- {{{

augroup ft_php
    au!
    au FileType php setlocal sw=4 sts=4 et
    au FileType php setlocal foldmethod=syntax
augroup END

" }}}
" Puppet ------------------------------------------------------------------- {{{

augroup ft_puppet
    au!

    au Filetype puppet setlocal foldmethod=marker
    au Filetype puppet setlocal foldmarker={,}
augroup END

" }}}
" Python ------------------------------------------------------------------- {{{

augroup ft_python
    au!
    au FileType python set sw=4 sts=4 noet
    au FileType python setlocal omnifunc=pythoncomplete#Complete
augroup END

" }}}
" Ruby --------------------------------------------------------------------- {{{

augroup ft_ruby
    au!
    au FileType ruby,haml,eruby,yaml setlocal ai sw=2 sts=2 expandtab
    au FileType ruby setlocal foldmethod=syntax
    au FileType ruby setlocal makeprg=rspec

    au BufNewFile,BufReadPost Capfile setlocal filetype=ruby
    au BufNewFile,BufReadPost Cheffile setlocal filetype=ruby
    au BufNewFile,BufReadPost Guardfile setlocal filetype=ruby
    au BufNewFile,BufReadPost Procfile setlocal filetype=ruby
    au BufNewFile,BufReadPost *.ru setlocal filetype=ruby
    au BufNewFile,BufReadPost Vagrantfile setlocal filetype=ruby
    au FileType ruby setlocal omnifunc=rubycomplete#Complete

    "" Convert Ruby 1.8 hashes to Ruby 1.9 syntax
    nnoremap <leader>: :%s/:\([^ ]*\)\(\s*\)=>/\1:/gc<CR>
    "" Add whitespace inside of braces
    nnoremap <leader>{ :%s/{\([^ ]\)/{ \1/gc<CR>
augroup END

" }}}
" TeX ---------------------------------------------------------------------- {{{

augroup ft_tex
    au!
    au FileType tex nnoremap <buffer> <Leader>m :Make<CR>Make clean<CR>!open -g *.pdf<CR>
augroup END

" }}}
" Vim ---------------------------------------------------------------------- {{{

augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType vim setlocal foldlevel=-1
    au FileType help setlocal textwidth=80
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}
" XML ---------------------------------------------------------------------- {{{

augroup ft_xml
    au!
    au FileType xml setlocal ai sw=2 sts=2 et
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    au FileType xml setlocal foldmethod=manual

    " Use <localleader>f to fold the current tag.
    au FileType xml nnoremap <buffer> <localleader>f Vatzf

    " Indent tag
    au FileType xml nnoremap <buffer> <localleader>= Vat=

    " Format XML
    au FileType xml nnoremap <leader>xml :%!xmllint --format -<CR>
augroup END

" }}}

" }}}
" Plugin configuration ----------------------------------------------------- {{{

" Airline  {{{

let g:airline#extensions#branch#enabled=1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts=1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline#extensions#default#section_truncate_width = {}

" }}}
" Committia {{{

let g:committia_open_only_vim_starting = 1
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction

" }}}
" Commentary  {{{

nmap <Leader># <Plug>CommentaryLine
xmap <Leader># <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType puppet setlocal commentstring=#\ %s
    au FileType fish setlocal commentstring=#\ %s
augroup END

" }}}
" Ctrl-P  {{{

nnoremap <Leader>t :CtrlP<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <Leader>. :CtrlPTag<CR>
nnoremap <Leader>fu :CtrlPFunky<Cr>
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_dotfiles = 0
let g:ctrlp_max_files = 0
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard', 'find %s "(" -type f -or -type l ")" -maxdepth 15 -not -path "*/\.*/*"']
let g:ctrlp_use_caching = 1
let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 30
let g:ctrlp_extensions = ['tag', 'funky']
let g:ctrlp_funky_multi_buffers = 1

" }}}
" DelimitMate  {{{

let delimitMate_excluded_ft = "clojure,lisp"

" }}}
" Easy Align {{{
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap t <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
" }}}
" Expand Region  {{{

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" }}}
" Fugitive  {{{

nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <leader>gp :Git push<CR>

augroup ft_fugitive
    au!

    au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" }}}
" Indent guides  {{{

let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1

" }}}
" lexima.vim {{{

let g:lexima_enable_basic_rules=1
let g:lexima_enable_newline_rules=1
let g:lexima_enable_endwise_rules=1

" }}}
" NERDTree  {{{

" Ctrl+D map to toggle NERDTree
nnoremap <silent> <C-d> :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1
let NERDTreeMinimalUI=1
let g:nerdtree_tabs_focus_on_files=1
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
                    \ 'xapian_index', '.*.pid', 'monitor.py', '.*-fixtures-.*.json',
                    \ '.*\.o$', 'db.db', 'tags.bak', '.*\.pdf$', '.*\.mid$',
                    \ '.*\.midi$']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'

augroup ps_nerdtree
    au!

    au Filetype nerdtree setlocal nolist
    au Filetype nerdtree nnoremap <buffer> H :vertical resize -10<cr>
    au Filetype nerdtree nnoremap <buffer> L :vertical resize +10<cr>
    au Filetype nerdtree nnoremap <buffer> K :q<cr>
augroup END

" }}}
" Neomake {{{

augroup neomake
    au!
    au BufWritePost *.rb,*.coffee,*.go,*.js,*.py,*.zsh,*.tex,*.vim,*.pp,*.lua,*.c,*.cpp,*.java,*.hs,*.sh,*.ex,*.html,*.less,*.scss,*.sass Neomake
augroup END

let g:neomake_serialize = 1
let g:neomake_serialize_abort_on_error = 1

" }}}
" PIV {{{

let g:DisableAutoPHPFolding = 1

" }}}
" Rainbow parentheses  {{{

nmap <Leader>ra :RainbowParenthesesToggle<CR>

" }}}
" Ruby  {{{

" Autocomplete setup
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
if !empty($MY_RUBY_HOME)
 let g:ruby_path = join(split(glob($MY_RUBY_HOME.'/lib/ruby/*.*')."\n".glob($MY_RUBY_HOME.'/lib/ruby/site_ruby/*'),"\n"),',')
endif

" }}}
" Scratch  {{{

command! ScratchToggle call ScratchToggle()

function! ScratchToggle()
    if exists("w:is_scratch_window")
        unlet w:is_scratch_window
        exec "q"
    else
        exec "normal! :Sscratch\<cr>\<C-W>L"
        let w:is_scratch_window = 1
    endif
endfunction

nnoremap <silent> <leader><tab> :ScratchToggle<cr>

" }}}
" Selecta  {{{

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, vim_command)
  try
    silent! exec a:vim_command . " " . system(a:choice_command . " | selecta")
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
  endtry
  redraw!
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
" map <leader>f :call SelectaCommand("find $(git rev-parse --show-toplevel) -type f", ":e")<cr>

" }}}
" UltiSnips  {{{

let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
" let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
" function! g:UltiSnips_Complete()
"   call UltiSnips#ExpandSnippetOrJump()
"   if g:ulti_expand_or_jump_res == 0
"     if pumvisible()
"       return "\<C-N>"
"     else
"       return "\<TAB>"
"     endif
"   endif

"   return ""
" endfunction
" au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" }}}
" Undotree {{{

nnoremap <C-u> :UndotreeToggle<cr>

" }}}

" }}}
" Convenience shortcuts ---------------------------------------------------- {{{

" Split current file vertically (h) or horizontally (v)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Set working directory to that of the current file
nnoremap <Leader>cwd :cd %:p:h<CR>:pwd<CR>

"" Move block of text
vmap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" ctags
map <Leader>ct :!ctags -R *<CR>

" Completion
inoremap <C-c> <C-x><C-o>

" Write with sudo
cmap w!! w !sudo tee % >/dev/null

" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]

" Calculator
inoremap <C-B> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Filetype switching {{{
nnoremap _rb :set ft=ruby<CR>
nnoremap _php :set ft=php<CR>
" }}}

" }}}
" Mini Plugins ------------------------------------------------------------- {{{

" Pulse Line {{{

function! s:Pulse() " {{{
    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 8
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()

" }}}
" Highlight Word {{{
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n) " {{{
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction " }}}

" Mappings {{{

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

" }}}
" Default Highlights {{{

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

" }}}

" }}}

" }}}
" Helper functions --------------------------------------------------------- {{{

function! MakeBlockHeader() " {{{
  let headerLength = &tw - 4

  let header = input("Header: ")
  if strlen(header) == 0
    return
  endif

  if strlen(header) > headerLength - 6
    " Begin with '# ' and end with ' ###'
    return
  endif

  let header = '" ' . header . " "
  let lenOfHeader = strlen(header)
  let i = 0
  while i < headerLength - lenOfHeader
    let header = header . "-"
    let i = i + 1
  endwhile
  let header= header . " {{{"
  let lineNo = line(".")
  call append(lineNo, header)

  " Add an empty line
  call append(lineNo + 1, "")
  call append(lineNo + 2, "")
  call append(lineNo + 3, "")
  call append(lineNo + 4, '" }}}')
  " Position the cursor
  call cursor(lineNo + 3, 0)
  execute "startinsert"
endfunction " }}}"
map <leader>header :call MakeBlockHeader()<cr>

" }}}
" Environments (GUI/Console) ----------------------------------------------- {{{

if has('gui_running')
    " GUI Vim

    "set guifont=Source\ Code\ Pro\ for\ Powerline:h16
    "set guifont=Monoid:h16
    set guifont=Hack:h16

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set go+=a
    set go+=A
    set go+=c
    set go+=e

    set showtabline=0

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    " color flatlandia
    color gruvbox
    set bg=dark

    if has("gui_macvim")
        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz
    else
        " Non-MacVim GUI, like Gvim
    end
else
    " Console Vim
    " For me, this means iTerm2, possibly through tmux

    " Mouse support
    set mouse=a
endif

" }}}
" Local vimrc -------------------------------------------------------------- {{{

if filereadable(expand("~/.vimrc_local"))
  source ~/.vimrc_local
endif

" }}}
