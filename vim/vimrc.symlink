" Intro -------------------------------------------------------------------- {{{
"
" This is the vimrc of Uwe Kleinmann.
" I recently switched from using separate files to one big vimrc with markers.
" This was heavily inspired by @sjl from whose vimrc I borrowed some parts as
" well.
"
" Author: Uwe Kleinmann <uwe@kleinmann.org>
" Source: https://github.com/kleinmann/dotfiles/vim/vimrc.symlink
"
" }}}
" Preamble ----------------------------------------------------------------- {{{

set nocompatible

set shell=/bin/bash

" }}}
" Vundle ------------------------------------------------------------------- {{{

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle take care of itself
Bundle 'gmarik/vundle'

" Github Repositories
Bundle 'rking/ag.vim'
Bundle 'moll/vim-bbye'
Bundle 'itchyny/calendar.vim'
Bundle 'sjl/clam.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'elixir-lang/vim-elixir'
Bundle 'terryma/vim-expand-region'
Bundle 'sjl/gundo.vim'
Bundle 'othree/html5.vim'
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'scrooloose/nerdtree'
Bundle 'spf13/PIV'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle 'majutsushi/tagbar'
Bundle 'duwanis/tomdoc.vim'
Bundle 'KurtPreston/vim-autoformat-rails'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-classpath'
Bundle 'guns/vim-clojure-static'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'honza/dockerfile.vim'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'tpope/vim-endwise.git'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'fatih/vim-go'
Bundle 'tpope/vim-haml'
Bundle 'haya14busa/incsearch.vim'
Bundle 'vim-scripts/listmaps.vim'
Bundle 'hallison/vim-markdown'
Bundle 'jceb/vim-orgmode'
Bundle 'rodjek/vim-puppet'
Bundle 'klen/python-mode'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-repeat'
Bundle 'airblade/vim-rooter'
Bundle 'thoughtbot/vim-rspec'
Bundle 'vim-ruby/vim-ruby'
Bundle 't9md/vim-ruby-xmpfilter'
Bundle 'vim-scripts/scratch.vim'
Bundle 'tpope/vim-sleuth'
Bundle 'slim-template/vim-slim'
Bundle 'tpope/vim-speeddating'
Bundle 'sjl/splice.vim'
Bundle 'AndrewRadev/splitjoin.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'jimenezrick/vimerl'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'kana/vim-textobj-user'
Bundle 'beyondwords/vim-twig'
Bundle 'webgefrickel/vim-typoscript'
Bundle 'tpope/vim-unimpaired'
Bundle 'Shougo/vimfiler.vim'
Bundle 'gcmt/wildfire.vim'

" Unite
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'junkblocker/unite-codesearch'
Plugin 'Shougo/unite-outline'
Bundle 'tsukkee/unite-tag'

" Snippets
Bundle 'honza/vim-snippets'
Bundle 'sirver/ultisnips'
Bundle 'Valloric/YouCompleteMe'

" Themes
Bundle 'Zenburn'
Bundle 'altercation/vim-colors-solarized'
Bundle 'CSApprox'
Bundle 'nanotech/jellybeans.vim'
Bundle 'nice/sweater'

" Visuals
Bundle 'rainbow_parentheses.vim'
Bundle 'bling/vim-airline'
Bundle 'bling/vim-bufferline'
Bundle 'nathanaelkane/vim-indent-guides'

" vim-scripts
Bundle 'matchit.zip'
Bundle 'xmledit'

filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" }}}
" Basics ------------------------------------------------------------------- {{{

set encoding=utf-8
scriptencoding utf-8
set modelines=0
set autoindent
set smartindent
set clipboard+=unnamed
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set numberwidth=5
set norelativenumber
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set switchbuf=useopen
set autowrite
set autoread
set shiftround
set title
set linebreak
set colorcolumn=+1

set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,tabpages,winsize,winpos " activate session saving

" iTerm2 is currently slow as balls at rendering the nice unicode lines, so for
" now I'll just use ASCII pipes.  They're ugly but at least I won't want to kill
" myself when trying to move around a file.
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Better Completion
set complete=.,b,u,t,i
set completeopt=longest,menu,preview

" Resize splits when the window is resized
au VimResized * :wincmd =

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces, wrapping {{{

set tabstop=8
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set wrap
set whichwrap+=<,>,h,l,[,] " Backspace and cursors wrap lines
set textwidth=80
set formatoptions=qrn1j
set colorcolumn=+1

" }}}

" Backups {{{

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vimundo//     " undo files
set backupdir=~/.vimbackup// " backups
set directory=~/.vimswap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}

" Color scheme {{{

syntax on
set background=dark
colorscheme jellybeans

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}

" }}}
" File shortcuts ----------------------------------------------------------- {{{

nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" }}}
" Searching and moving ----------------------------------------------------- {{{

" Use sane regexes.
cnoremap s/ s/\v
cnoremap s? s?\v

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

set nostartofline
set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

" Made D behave
nnoremap D d$

" Don't move on *
" I'd use a function for this but Vim clobbers the last search when you're in
" a function so fuck it, practicality beats purity.
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>

" Tags in all the places
set tags=./tags,~/tags,tags;,./TAGS,TAGS;

" Jumping to tags. {{{
"
" Basically, <c-]> jumps to tags (like normal) and <c-\> opens the tag in a new
" split instead.
"
" Both of them will align the destination line to the upper middle part of the
" screen.  Both will pulse the cursor line so you can see where the hell you
" are.  <c-\> will also fold everything in the buffer and then unfold just
" enough for you to see the destination line.
function! JumpToTag()
    execute "normal! \<c-]>mzzvzz15\<c-e>"
    execute "keepjumps normal! `z"
    Pulse
endfunction
function! JumpToTagInSplit()
    execute "normal! \<c-w>v\<c-]>mzzMzvzz15\<c-e>"
    execute "keepjumps normal! `z"
    Pulse
endfunction
" }}}
nnoremap t :silent! call JumpToTag()<cr>
nnoremap <c-t> :silent! call JumpToTagInSplit()<cr>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

" Directional Keys {{{

" Scroll screen lines, not file lines {{{
" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> <Down> ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> <Up> ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> <Down> ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> <Up> ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")
vnoremap <silent> <expr> <Down> ScreenMovement("j")
vnoremap <silent> <expr> k ScreenMovement("k")
vnoremap <silent> <expr> <Up> ScreenMovement("k")
vnoremap <silent> <expr> 0 ScreenMovement("0")
vnoremap <silent> <expr> ^ ScreenMovement("^")
vnoremap <silent> <expr> $ ScreenMovement("$")
" }}}

" Easy buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

noremap <leader>v <C-w>v

" }}}

" }}}
" Folding ------------------------------------------------------------------ {{{

set foldlevelstart=0
set foldcolumn=1
set foldmethod=marker

" Toggle folds with space
nnoremap <space> za
vnoremap <space> za

" Save and load folding automatically
au BufWinLeave ?* mkview
au BufWinEnter ?* silent loadview

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}
" Filetype-specific -------------------------------------------------------- {{{

" All ---------------------------------------------------------------------- {{{

" Remove trailing whitespaces and \^M chars
autocmd BufWritePre * :%s/\s\+$//e

" }}}
" CSS ---------------------------------------------------------------------- {{{

augroup ft_css
    au!
    au FileType css,less,sass setlocal ai sw=2 sts=2 et
    au FileType css,less,sass setlocal omnifunc=csscomplete#CompleteCSS

    au Filetype css,less,sass setlocal foldmethod=marker
    au Filetype css,less,sass setlocal foldmarker={,}
    au Filetype css,less,sass setlocal iskeyword+=-

    " Sort CSS properties alphabetically
    au FileType css nnoremap <leader>css :g#\({\n\)\@<=#.,/}/sort<cr>)"

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au BufNewFile,BufRead *.less,*.css inoremap <buffer> {<cr> {}<left><cr><space><space><space><space>.<cr><esc>kA<bs>
augroup END

" }}}
" Docker ------------------------------------------------------------------- {{{

augroup ft_docker
    au!
    au BufNewFile,BufReadPost Dockerfile setlocal filetype=dockerfile
augroup END

" }}}
" HTML --------------------------------------------------------------------- {{{

augroup ft_html
    au!
    au FileType html setlocal ai sw=4 sts=4 et
    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

    au FileType html setlocal foldmethod=manual

    " Use <localleader>f to fold the current tag.
    au FileType html, nnoremap <buffer> <localleader>f Vatzf

    " Use <localleader>t to fold the current templatetag.
    au FileType html, nmap <buffer> <localleader>t viikojozf

    " Indent tag
    au FileType html, nnoremap <buffer> <localleader>= Vat=
augroup END

" }}}
" Javascript --------------------------------------------------------------- {{{

augroup ft_javascript
    au!
    au FileType javascript setlocal ai sw=2 sts=2 et
    au BufNewFile,BufReadPost *.json setlocal filetype=json
    au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

    au FileType javascript setlocal foldmethod=marker
    au FileType javascript setlocal foldmarker={,}

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au Filetype javascript inoremap <buffer> {<cr> {}<left><cr><space><space><space><space>.<cr><esc>kA<bs>

    " Prettify a hunk of JSON
    au FileType javascript nnoremap <buffer> <leader>js ^vg_:!python -m json.tool<cr>:%s/ \{4\}/  /<cr>
    au FileType javascript vnoremap <buffer> <leader>js :!python -m json.tool<cr>:%s/ \{4\}/  /<cr>
augroup END

" }}}
" Objective C -------------------------------------------------------------- {{{

augroup ft_objectivec
    au!
    " Build objective-c code by using rake
    au FileType objc setlocal makeprg=rake
augroup END

" }}}
" PHP ---------------------------------------------------------------------- {{{

augroup ft_php
    au!
    au FileType php setlocal sw=4 sts=4 et
    au FileType php setlocal foldmethod=syntax
    au FileType php setlocal foldlevelstart=99
augroup END

" }}}
" Puppet ------------------------------------------------------------------- {{{

augroup ft_puppet
    au!

    au Filetype puppet setlocal foldmethod=marker
    au Filetype puppet setlocal foldmarker={,}
augroup END

" }}}
" Python ------------------------------------------------------------------- {{{

augroup ft_python
    au!
    au FileType python set sw=4 sts=4 noet
    au FileType python setlocal omnifunc=pythoncomplete#Complete
augroup END

" }}}
" Ruby --------------------------------------------------------------------- {{{

augroup ft_ruby
    au!
    au FileType ruby,haml,eruby,yaml setlocal ai sw=2 sts=2 et
    au FileType ruby setlocal foldmethod=syntax
    au FileType ruby setlocal foldlevelstart=99
    au FileType ruby normal zR

    au BufNewFile,BufReadPost Capfile setlocal filetype=ruby
    au BufNewFile,BufReadPost Cheffile setlocal filetype=ruby
    au BufNewFile,BufReadPost Guardfile setlocal filetype=ruby
    au BufNewFile,BufReadPost Procfile setlocal filetype=ruby
    au BufNewFile,BufReadPost *.ru setlocal filetype=ruby
    au BufNewFile,BufReadPost Vagrantfile setlocal filetype=ruby
    au FileType ruby setlocal omnifunc=rubycomplete#Complete

    "" Convert Ruby 1.8 hashes to Ruby 1.9 syntax
    nnoremap <leader>: :%s/:\([^ ]*\)\(\s*\)=>/\1:/gc<CR>
    "" Add whitespace inside of braces
    nnoremap <leader>{ :%s/{\([^ ]\)/{ \1/gc<CR>
augroup END

" }}}
" TeX ---------------------------------------------------------------------- {{{

augroup ft_tex
    au!
    au FileType tex nnoremap <buffer> <Leader>m :Make<CR>Make clean<CR>!open -g *.pdf<CR>
augroup END

" }}}
" Vim ---------------------------------------------------------------------- {{{

augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=80
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}
" XML ---------------------------------------------------------------------- {{{

augroup ft_xml
    au!
    au FileType xml setlocal ai sw=2 sts=2 et
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    au FileType xml setlocal foldmethod=manual

    " Use <localleader>f to fold the current tag.
    au FileType xml nnoremap <buffer> <localleader>f Vatzf

    " Indent tag
    au FileType xml nnoremap <buffer> <localleader>= Vat=

    " Format XML
    au FileType xml nnoremap <leader>xml :%!xmllint --format -<CR>
augroup END

" }}}

" }}}
" Plugin configuration ----------------------------------------------------- {{{

" Ag  {{{

" nnoremap <Leader>a :Ag<space>
" let g:agprg='ag --smart-case --nogroup --nocolor --column'

" }}}
" Airline  {{{

let g:airline_enable_branch=1
let g:airline_branch_prefix = ' '
let g:airline_readonly_symbol = ''
let g:airline_linecolumn_prefix = ' '
let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

" }}}
" Bufferline  {{{

let g:bufferline_echo=0

" }}}
" Calendar  {{{

let g:calendar_google_calendar = 1

" }}}
" Clam  {{{

nnoremap ! :Clam<space>
vnoremap ! :ClamVisual<space>
let g:clam_autoreturn = 1
let g:clam_debug = 1

" }}}
" Commentary  {{{

nmap <Leader># <Plug>CommentaryLine
xmap <Leader># <Plug>Commentary

augroup plugin_commentary
    au!
    au FileType htmldjango setlocal commentstring={#\ %s\ #}
    au FileType clojurescript setlocal commentstring=;\ %s
    au FileType lisp setlocal commentstring=;\ %s
    au FileType puppet setlocal commentstring=#\ %s
    au FileType fish setlocal commentstring=#\ %s
augroup END

" }}}
" DelimitMate  {{{

let delimitMate_excluded_ft = "clojure,lisp"

" }}}
" Dispatch  {{{

autocmd FileType java let b:dispatch = 'javac %'
autocmd FileType coffee let b:dispatch = 'coffee -c %'
autocmd FileType html let b:dispatch = 'open %'
autocmd FileType ruby let b:dispatch = 'rspec %'
nnoremap <leader>d :Dispatch<CR>

" }}}
" Expand Region  {{{

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" }}}
" Fugitive  {{{

nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <leader>gp :Git push<CR>

augroup ft_fugitive
    au!

    au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" }}}
" Gundo  {{{

nnoremap <C-u> :GundoToggle<CR>
let g:gundo_preview_bottom = 1
let g:gundo_tree_statusline = "Gundo"
let g:gundo_preview_statusline = "Gundo Preview"

" }}}
" Incsearch.vim {{{
let g:incsearch#magic = '\v'
let g:incsearch#consistent_n_direction = 1
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" }}}
" Indent guides  {{{

let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1

" }}}
" LaTeX  {{{

let g:tex_flavor='latex'

" }}}
" NERDTree  {{{

" Ctrl+D map to toggle NERDTree
" nnoremap <silent> <C-d> :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1
let NERDTreeMinimalUI=1
let g:nerdtree_tabs_focus_on_files=1
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
                    \ 'xapian_index', '.*.pid', 'monitor.py', '.*-fixtures-.*.json',
                    \ '.*\.o$', 'db.db', 'tags.bak', '.*\.pdf$', '.*\.mid$',
                    \ '.*\.midi$']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'

augroup ps_nerdtree
    au!

    au Filetype nerdtree setlocal nolist
    au Filetype nerdtree nnoremap <buffer> H :vertical resize -10<cr>
    au Filetype nerdtree nnoremap <buffer> L :vertical resize +10<cr>
    au Filetype nerdtree nnoremap <buffer> K :q<cr>
augroup END

" }}}
" Python {{{

let g:pymode_doc = 1
let g:pymode_doc_key = 'M'
let g:pydoc = 'pydoc'
let g:pymode_syntax = 1
let g:pymode_syntax_all = 0
let g:pymode_syntax_builtin_objs = 1
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_run = 0
let g:pymode_lint = 0
let g:pymode_breakpoint = 0
let g:pymode_utils_whitespaces = 0
let g:pymode_virtualenv = 0
let g:pymode_folding = 0

let g:pymode_options_indent = 0
let g:pymode_options_fold = 0
let g:pymode_options_other = 0
let g:pymode_options = 0

let g:pymode_rope = 1
let g:pymode_rope_global_prefix = "<localleader>R"
let g:pymode_rope_local_prefix = "<localleader>r"
let g:pymode_rope_auto_project = 1
let g:pymode_rope_enable_autoimport = 0
let g:pymode_rope_autoimport_generate = 1
let g:pymode_rope_autoimport_underlineds = 0
let g:pymode_rope_codeassist_maxfixes = 10
let g:pymode_rope_sorted_completions = 1
let g:pymode_rope_extended_complete = 1
let g:pymode_rope_autoimport_modules = ["os", "shutil", "datetime"]
let g:pymode_rope_confirm_saving = 1
let g:pymode_rope_vim_completion = 1
let g:pymode_rope_guess_project = 1
let g:pymode_rope_goto_def_newwin = 0
let g:pymode_rope_always_show_complete_menu = 0

" }}}
" Rainbow parentheses  {{{

nmap <Leader>ra :RainbowParenthesesToggle<CR>

" }}}
" RSpec  {{{

let g:rspec_command = "Dispatch bundle exec rspec {spec}"

" }}}
" Ruby  {{{

" Autocomplete setup
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
if !empty($MY_RUBY_HOME)
 let g:ruby_path = join(split(glob($MY_RUBY_HOME.'/lib/ruby/*.*')."\n".glob($MY_RUBY_HOME.'/lib/ruby/site_ruby/*'),"\n"),',')
endif

" }}}
" Ruby XMPFilter  {{{

autocmd FileType ruby nmap <buffer> <C-m> <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <C-m> <Plug>(xmpfilter-mark)

autocmd FileType ruby nmap <buffer> <C-n> <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <C-n> <Plug>(xmpfilter-run)

" }}}
" Scratch  {{{

command! ScratchToggle call ScratchToggle()

function! ScratchToggle()
    if exists("w:is_scratch_window")
        unlet w:is_scratch_window
        exec "q"
    else
        exec "normal! :Sscratch\<cr>\<C-W>L"
        let w:is_scratch_window = 1
    endif
endfunction

nnoremap <silent> <leader><tab> :ScratchToggle<cr>

" }}}
" Selecta  {{{

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, vim_command)
  try
    silent! exec a:vim_command . " " . system(a:choice_command . " | selecta")
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
  endtry
  redraw!
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
" map <leader>f :call SelectaCommand("find $(git rev-parse --show-toplevel) -type f", ":e")<cr>

" }}}
" Splice {{{

let g:splice_prefix = "-"

let g:splice_initial_mode = "grid"

let g:splice_initial_layout_grid = 0
let g:splice_initial_layout_loupe = 0
let g:splice_initial_layout_compare = 0
let g:splice_initial_layout_path = 0

let g:splice_initial_diff_grid = 1
let g:splice_initial_diff_loupe = 0
let g:splice_initial_diff_compare = 1
let g:splice_initial_diff_path = 0

let g:splice_initial_scrollbind_grid = 0
let g:splice_initial_scrollbind_loupe = 0
let g:splice_initial_scrollbind_compare = 0
let g:splice_initial_scrollbind_path = 0

let g:splice_wrap = "nowrap"

" }}}
" SplitJoin  {{{

nmap sj :SplitjoinSplit<CR>
nmap sk :SplitjoinJoin<CR>

" }}}
" Syntastic  {{{

nnoremap <Leader>s :SyntasticCheck<CR>
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump=0
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_mode_map = { 'mode': 'passive',
                          \ 'active_filetypes': ['ruby'],
                          \ 'passive_filetypes': ['java', 'html'] }
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
let g:syntastic_jsl_conf = '$HOME/.vim/config/jsl.conf'
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" }}}
" Tabularize  {{{

if exists(":Tabularize")
  nmap <Leader>t= :Tabularize /=<CR>
  vmap <Leader>t= :Tabularize /=<CR>
  nmap <Leader>t: :Tabularize /:\zs<CR>
  vmap <Leader>t: :Tabularize /:\zs<CR>
  nmap <Leader>t, :Tabularize /,\zs<CR>
  vmap <Leader>t, :Tabularize /,\zs<CR>
  nmap <Leader>t> :Tabularize /=>\zs<CR>
  vmap <Leader>t> :Tabularize /=>\zs<CR>
endif

" }}}
" taglist.vim  {{{

map <Leader>l :TagbarToggle<CR>
let s:tlist_def_go_settings = 'go;g:enum;s:struct;u:union;t:type;' .
      \ 'v:variable;f:function'

" }}}
" UltiSnips  {{{

let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippetOrJump()
  if g:ulti_expand_or_jump_res == 0
    if pumvisible()
      return "\<C-N>"
    else
      return "\<TAB>"
    endif
  endif

  return ""
endfunction
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" }}}
" Unite {{{
let g:unite_split_rule = "botright"
let g:unite_update_time = 300
let g:unite_cursor_line_highlight = "CursorLine"
let g:unite_prompt = "➜ "
let g:unite_source_rec_async_command = 'ag -l .'
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--smart-case --nogroup --nocolor --line-numbers'
let g:unite_source_grep_recursive_opt = ''
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

" Set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.(hg|git|bzr)/',
      \ '\.(o|swp|pyc|wav|mp3|ogg|blend)',
      \ 'tmp/',
      \ 'node_modules/',
      \ 'bower_components/',
      \ '.sass-cache',
      \ ], '\|'))

" nnoremap <silent> <C-d> :Unite -buffer-name=browse file<cr>
nnoremap <silent> <Leader>a :Unite -buffer-name=ag grep:.<cr>
nnoremap <silent> <Leader>b :Unite -start-insert -buffer-name=buffers -quick-match buffer<cr>
nnoremap <silent> <Leader>t :Unite -start-insert -buffer-name=files file_rec/async<cr>
nnoremap <silent> <Leader>. :Unite -buffer-name=tags tag<cr>
let g:unite_source_history_yank_enable = 1
nnoremap <silent> <Leader>p :Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> <leader>o :Unite -buffer-name=outline -vertical outline<cr>
nnoremap <silent> <leader>s :Unite -buffer-name=cs codesearch<cr>

" Function that only triggers when unite opens
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()

  " exit with esc
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <ESC> <Plug>(unite_exit)

  " Ctrl jk mappings
  imap <buffer> <c-j> <Plug>(unite_insert_leave)
  imap <buffer> <c-k> <Plug>(unite_insert_leave)
  nmap <buffer> <c-j> <Plug>(unite_loop_cursor_down)
  nmap <buffer> <c-k> <Plug>(unite_loop_cursor_up)

  " refresh unite
  nmap <buffer> <C-r> <Plug>(unite_redraw)
  imap <buffer> <C-r> <Plug>(unite_redraw)

  " split control
  inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

endfunction
" }}}
" Vimfiler {{{

nnoremap <silent> <C-d> :VimFilerExplorer<CR>
" Disable netrw.vim
let g:loaded_netrwPlugin = 1
let g:vimfiler_as_default_explorer = 1
function! s:vimfiler_on_enter() "{{{
  let context = vimfiler#get_context()

  if context.explorer
    let mapping = vimfiler#mappings#smart_cursor_map(
          \ "\<Plug>(vimfiler_expand_tree)",
          \ "\<Plug>(vimfiler_edit_file)"
          \ )
  else
    let mapping = vimfiler#mappings#smart_cursor_map(
          \ "\<Plug>(vimfiler_cd_file)",
          \ "\<Plug>(vimfiler_edit_file)"
          \ )
  endif

  execute "normal " . mapping
endfunction "}}}

augroup ps_vimfiler
    au!

    au Filetype vimfiler setlocal nolist
    au Filetype vimfiler nnoremap <buffer> H :vertical resize -10<cr>
    au Filetype vimfiler nnoremap <buffer> L :vertical resize +10<cr>
    au Filetype vimfiler nnoremap <buffer> K :q<cr>
    au FileType vimfiler nmap <buffer><silent> <Enter> :call <SID>vimfiler_on_enter()<CR>
augroup END

" }}}
" YouCompleteMe {{{
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']

" TODO: Make arrow keys not jump in result list but actually move around in the
" file.
" }}}

" }}}
" Convenience shortcuts ---------------------------------------------------- {{{

" Split current file vertically (h) or horizontally (v)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Set working directory to that of the current file
nnoremap <Leader>cwd :cd %:p:h<CR>:pwd<CR>

"" Move block of text
vmap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z

" ctags
map <Leader>ct :!ctags -R *<CR>

" Completion
inoremap <C-c> <C-x><C-o>

" Source
vnoremap <leader>S y:execute @@<CR>
nnoremap <leader>S ^vg_y:execute @@<CR>

" Write with sudo
cmap w!! w !sudo tee % >/dev/null

" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]

" Calculator
inoremap <C-B> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

" Filetype switching {{{
nnoremap _rb :set ft=ruby<CR>
nnoremap _php :set ft=php<CR>
" }}}

" }}}
" Mini Plugins ------------------------------------------------------------- {{{

" Pulse Line {{{

function! s:Pulse() " {{{
    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 8
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()

" }}}
" Highlight Word {{{
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n) " {{{
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction " }}}

" Mappings {{{

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

" }}}
" Default Highlights {{{

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

" }}}

" }}}

" }}}
" Helper functions --------------------------------------------------------- {{{

function! MakeBlockHeader() " {{{
  let headerLength = &tw - 4

  let header = input("Header: ")
  if strlen(header) == 0
    return
  endif

  if strlen(header) > headerLength - 6
    " Begin with '# ' and end with ' ###'
    return
  endif

  let header = '" ' . header . " "
  let lenOfHeader = strlen(header)
  let i = 0
  while i < headerLength - lenOfHeader
    let header = header . "-"
    let i = i + 1
  endwhile
  let header= header . " {{{"
  let lineNo = line(".")
  call append(lineNo, header)

  " Add an empty line
  call append(lineNo + 1, "")
  call append(lineNo + 2, "")
  call append(lineNo + 3, "")
  call append(lineNo + 4, '" }}}')
  " Position the cursor
  call cursor(lineNo + 3, 0)
  execute "startinsert"
endfunction " }}}"
map <leader>header :call MakeBlockHeader()<cr>

" }}}
" Environments (GUI/Console) ----------------------------------------------- {{{

if has('gui_running')
    " GUI Vim

    set guifont=Source\ Code\ Pro\ for\ Powerline:h14

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set go+=a
    set go+=A
    set go+=c
    set go+=e

    set showtabline=0

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    color sweater
    set bg=light

    if has("gui_macvim")
        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz
    else
        " Non-MacVim GUI, like Gvim
    end
else
    " Console Vim
    " For me, this means iTerm2, possibly through tmux

    " Mouse support
    set mouse=a
endif

" }}}
" Local vimrc -------------------------------------------------------------- {{{

if filereadable(expand("~/.vimrc_local"))
  source ~/.vimrc_local
endif

" }}}
